



















// This file was automatically generated by the PetaPoco T4 Template
// Do not make changes directly to this file - edit the template instead
// 
// The following connection settings were used to generate this file
// 
//     Connection String Name: `ConnectionString`
//     Provider:               `System.Data.SqlClient`
//     Connection String:      `Data Source=.;Initial Catalog=sop;Integrated Security=True`
//     Schema:                 ``
//     Include Views:          `False`



using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using PetaPoco;

namespace ConnectionString
{

	public partial class ConnectionStringDB : Database
	{
		public ConnectionStringDB() 
			: base("ConnectionString")
		{
			CommonConstruct();
		}

		public ConnectionStringDB(string connectionStringName) 
			: base(connectionStringName)
		{
			CommonConstruct();
		}
		
		partial void CommonConstruct();
		
		public interface IFactory
		{
			ConnectionStringDB GetInstance();
		}
		
		public static IFactory Factory { get; set; }
        public static ConnectionStringDB GetInstance()
        {
			if (_instance!=null)
				return _instance;
				
			if (Factory!=null)
				return Factory.GetInstance();
			else
				return new ConnectionStringDB();
        }

		[ThreadStatic] static ConnectionStringDB _instance;
		
		public override void OnBeginTransaction()
		{
			if (_instance==null)
				_instance=this;
		}
		
		public override void OnEndTransaction()
		{
			if (_instance==this)
				_instance=null;
		}
        

		public class Record<T> where T:new()
		{
			public static ConnectionStringDB repo { get { return ConnectionStringDB.GetInstance(); } }
			public bool IsNew() { return repo.IsNew(this); }
			public object Insert() { return repo.Insert(this); }

			public void Save() { repo.Save(this); }
			public int Update() { return repo.Update(this); }

			public int Update(IEnumerable<string> columns) { return repo.Update(this, columns); }
			public static int Update(string sql, params object[] args) { return repo.Update<T>(sql, args); }
			public static int Update(Sql sql) { return repo.Update<T>(sql); }
			public int Delete() { return repo.Delete(this); }
			public static int Delete(string sql, params object[] args) { return repo.Delete<T>(sql, args); }
			public static int Delete(Sql sql) { return repo.Delete<T>(sql); }
			public static int Delete(object primaryKey) { return repo.Delete<T>(primaryKey); }
			public static bool Exists(object primaryKey) { return repo.Exists<T>(primaryKey); }
			public static bool Exists(string sql, params object[] args) { return repo.Exists<T>(sql, args); }
			public static T SingleOrDefault(object primaryKey) { return repo.SingleOrDefault<T>(primaryKey); }
			public static T SingleOrDefault(string sql, params object[] args) { return repo.SingleOrDefault<T>(sql, args); }
			public static T SingleOrDefault(Sql sql) { return repo.SingleOrDefault<T>(sql); }
			public static T FirstOrDefault(string sql, params object[] args) { return repo.FirstOrDefault<T>(sql, args); }
			public static T FirstOrDefault(Sql sql) { return repo.FirstOrDefault<T>(sql); }
			public static T Single(object primaryKey) { return repo.Single<T>(primaryKey); }
			public static T Single(string sql, params object[] args) { return repo.Single<T>(sql, args); }
			public static T Single(Sql sql) { return repo.Single<T>(sql); }
			public static T First(string sql, params object[] args) { return repo.First<T>(sql, args); }
			public static T First(Sql sql) { return repo.First<T>(sql); }
			public static List<T> Fetch(string sql, params object[] args) { return repo.Fetch<T>(sql, args); }
			public static List<T> Fetch(Sql sql) { return repo.Fetch<T>(sql); }
			public static List<T> Fetch(long page, long itemsPerPage, string sql, params object[] args) { return repo.Fetch<T>(page, itemsPerPage, sql, args); }
			public static List<T> Fetch(long page, long itemsPerPage, Sql sql) { return repo.Fetch<T>(page, itemsPerPage, sql); }
			public static List<T> SkipTake(long skip, long take, string sql, params object[] args) { return repo.SkipTake<T>(skip, take, sql, args); }
			public static List<T> SkipTake(long skip, long take, Sql sql) { return repo.SkipTake<T>(skip, take, sql); }
			public static Page<T> Page(long page, long itemsPerPage, string sql, params object[] args) { return repo.Page<T>(page, itemsPerPage, sql, args); }
			public static Page<T> Page(long page, long itemsPerPage, Sql sql) { return repo.Page<T>(page, itemsPerPage, sql); }
			public static IEnumerable<T> Query(string sql, params object[] args) { return repo.Query<T>(sql, args); }
			public static IEnumerable<T> Query(Sql sql) { return repo.Query<T>(sql); }

		}

	}
	



    

	[TableName("dbo.Sop_BlogsCategories")]



	[PrimaryKey("CategoryId")]




	[ExplicitColumns]

    public partial class Sop_BlogsCategory : ConnectionStringDB.Record<Sop_BlogsCategory>  
    {



		[Column] public int CategoryId { get; set; }





		[Column] public string CategoryName { get; set; }





		[Column] public string Description { get; set; }





		[Column] public int ParentId { get; set; }





		[Column] public string ParentIdList { get; set; }





		[Column] public byte ChildCount { get; set; }





		[Column] public byte Depth { get; set; }





		[Column] public byte Enabled { get; set; }





		[Column] public int ContentCount { get; set; }





		[Column] public byte ViewCountType { get; set; }





		[Column] public int DisplayOrder { get; set; }





		[Column] public DateTime DateCreated { get; set; }



	}

    

	[TableName("dbo.Sop_BlogsPosts")]



	[PrimaryKey("PostId")]




	[ExplicitColumns]

    public partial class Sop_BlogsPost : ConnectionStringDB.Record<Sop_BlogsPost>  
    {



		[Column] public int PostId { get; set; }





		[Column] public int CategoriyId { get; set; }





		[Column] public string UserId { get; set; }





		[Column] public string Title { get; set; }





		[Column] public string TitleImg { get; set; }





		[Column] public string Summary { get; set; }





		[Column] public string Body { get; set; }





		[Column] public int ViewCount { get; set; }





		[Column] public string CreatedIP { get; set; }





		[Column] public DateTime DateCreated { get; set; }



	}

    

	[TableName("dbo.Sop_BlogsReply")]




	[ExplicitColumns]

    public partial class Sop_BlogsReply : ConnectionStringDB.Record<Sop_BlogsReply>  
    {



		[Column] public int? ReplyId { get; set; }





		[Column] public int? PostId { get; set; }





		[Column] public long? UserId { get; set; }





		[Column] public int? ParentId { get; set; }





		[Column] public string ParentIdList { get; set; }





		[Column] public int? Depth { get; set; }





		[Column] public string Body { get; set; }





		[Column] public string CreatedIP { get; set; }





		[Column] public DateTime? DateCreated { get; set; }



	}

    

	[TableName("dbo.Sop_ChangeLog")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class Sop_ChangeLog : ConnectionStringDB.Record<Sop_ChangeLog>  
    {



		[Column] public int Id { get; set; }





		[Column] public string DataDate { get; set; }





		[Column] public string Title { get; set; }





		[Column] public string Summary { get; set; }





		[Column] public string Body { get; set; }





		[Column] public byte IsEnabled { get; set; }





		[Column] public byte? IsSelected { get; set; }





		[Column] public DateTime? DateCreated { get; set; }



	}

    

	[TableName("dbo.Sop_SystemParameter")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class Sop_SystemParameter : ConnectionStringDB.Record<Sop_SystemParameter>  
    {



		[Column] public int Id { get; set; }





		[Column] public byte Type { get; set; }





		[Column] public string Name { get; set; }





		[Column] public string Body { get; set; }





		[Column] public DateTime DateCreated { get; set; }



	}

    

	[TableName("dbo.Sop_TaskDetails")]




	[ExplicitColumns]

    public partial class Sop_TaskDetail : ConnectionStringDB.Record<Sop_TaskDetail>  
    {



		[Column] public int Id { get; set; }





		[Column] public string Name { get; set; }





		[Column] public string TaskRule { get; set; }





		[Column] public string ClassType { get; set; }





		[Column] public byte Enabled { get; set; }





		[Column] public byte RunAtRestart { get; set; }





		[Column] public byte IsRunning { get; set; }





		[Column] public DateTime? LastStart { get; set; }





		[Column] public DateTime? LastEnd { get; set; }





		[Column] public byte? LastIsSuccess { get; set; }





		[Column] public DateTime? NextStart { get; set; }





		[Column] public DateTime? StartDate { get; set; }





		[Column] public DateTime? EndDate { get; set; }





		[Column] public byte? RunAtServer { get; set; }



	}

    

	[TableName("dbo.Sop_TestInfo")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class Sop_TestInfo : ConnectionStringDB.Record<Sop_TestInfo>  
    {



		[Column] public int Id { get; set; }





		[Column] public byte Type { get; set; }





		[Column] public bool IsDel { get; set; }





		[Column] public byte Status { get; set; }





		[Column] public long LongValue { get; set; }





		[Column] public double FloatValue { get; set; }





		[Column] public decimal DecimalValue { get; set; }





		[Column] public string Body { get; set; }





		[Column] public DateTime DateCreated { get; set; }



	}

    

	[TableName("dbo.Sop_UsersInRoles")]



	[PrimaryKey("Id")]




	[ExplicitColumns]

    public partial class Sop_UsersInRole : ConnectionStringDB.Record<Sop_UsersInRole>  
    {



		[Column] public int Id { get; set; }





		[Column] public long UserId { get; set; }





		[Column] public string RoleEnName { get; set; }





		[Column] public DateTime DateCreated { get; set; }



	}

    

	[TableName("dbo.Sop_UsersLogin")]



	[PrimaryKey("UserId", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class Sop_UsersLogin : ConnectionStringDB.Record<Sop_UsersLogin>  
    {



		[Column] public int id { get; set; }





		[Column] public string UserId { get; set; }





		[Column] public string AccountName { get; set; }





		[Column] public string AccountEmail { get; set; }





		[Column] public string AccountMobile { get; set; }





		[Column] public string AccountIDcard { get; set; }





		[Column] public byte IsVerifiedEmail { get; set; }





		[Column] public byte IsVerifiedMobile { get; set; }





		[Column] public string PassWord { get; set; }





		[Column] public byte PassWordEncryption { get; set; }





		[Column] public string TrueName { get; set; }





		[Column] public string NickName { get; set; }





		[Column] public byte Status { get; set; }





		[Column] public string StatusNotes { get; set; }





		[Column] public string CreatedIP { get; set; }





		[Column] public string LastActivityIP { get; set; }





		[Column] public DateTime LastActivityTime { get; set; }





		[Column] public DateTime DateCreated { get; set; }



	}

    

	[TableName("dbo.Sop_UsersRolesInfo")]



	[PrimaryKey("EnName", AutoIncrement=false)]


	[ExplicitColumns]

    public partial class Sop_UsersRolesInfo : ConnectionStringDB.Record<Sop_UsersRolesInfo>  
    {



		[Column] public string EnName { get; set; }





		[Column] public string CnName { get; set; }





		[Column] public string FriendlyName { get; set; }





		[Column] public int? IsPublic { get; set; }





		[Column] public string RoleImage { get; set; }





		[Column] public string IconClass { get; set; }





		[Column] public int? IsEnabled { get; set; }





		[Column] public string Description { get; set; }



	}


}
